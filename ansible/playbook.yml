- name: network setup
  hosts: loadbalancer
  become: True
  gather_facts: True
  tasks:
    - shell: echo '1' > /proc/sys/net/ipv4/ip_forward
    - ansible.builtin.iptables:
        table: nat
        chain: POSTROUTING
        out_interface: eth0
        jump: MASQUERADE 
    - ansible.builtin.iptables:
        chain: FORWARD
        in_interface: eth1
        out_interface: eth0
        jump: ACCEPT 
    - ansible.builtin.iptables:
        chain: FORWARD
        in_interface: eth0
        out_interface: eth1
        jump: ACCEPT 
        
- name: set default gateway on hosts
  hosts: servers
  become: True
  vars:
   - ipaddr: 192.168.10.10
  tasks:
   - command: "route add default gw {{ ipaddr }}"

- name: docker setup
  hosts: all
  become: True
  tasks:
        - name: downloading docker installation shell script
          command: curl -fsSL https://get.docker.com -o get-docker.sh
        - name: docker installation
          command: "sh get-docker.sh"
     
        - command: "systemctl start docker"
        - yum: 
            name: epel-release

        - name: installing pip
          yum: 
            name: python-pip

        - name: installing ansible module for managing docker
          pip: 
            name: docker
            name: jsondiff

- name: setting up swarm
  hosts: all
  become: True
  gather_facts: True
  vars:
    - manager_ip: 192.168.10.18
  tasks:
    
    - name: Init a new swarm with default parameters
      docker_swarm:
        state: present
        advertise_addr: "{{ manager_ip }}:2377"
      register: result
      ignore_errors: true
      when:
          - inventory_hostname == 'localhost'
    - set_fact: token={{ result.swarm_facts.JoinTokens.Worker }}
      when:
          - inventory_hostname == 'localhost'

    - name: testing if we catch the correct join token
      debug: msg={{ hostvars['localhost']['token'] }}

    - name: Add nodes
      docker_swarm:
        state: join
        advertise_addr: "{{ inventory_hostname }}"
        join_token: "{{ hostvars['localhost']['token'] }}" 
        remote_addrs: [ '{{ manager_ip }}:2377' ]
      when: 
          - inventory_hostname != 'localhost'
      ignore_errors: true



- name: setting up swarm
  hosts: master
  become: True
  gather_facts: True
  tasks:
      - name: Merge node labels and new labels
        community.docker.docker_node:
          hostname: redis.novalocal
          labels: 
                redis: "true"

      - name: Merge node labels and new labels
        community.docker.docker_node:
          hostname: logparser.novalocal
          labels:
                 logparser: "true"

      - name: Merge node labels and new labels
        community.docker.docker_node:
          hostname: metric.novalocal
          labels:
                 metric: "true"
      
      - name: Merge node labels and new labels
        community.docker.docker_node:
          hostname: loadbalancer.novalocal
          labels: 
                loadbalancer: "true"

- name: setup docker registry
  hosts: master
  become: True
  gather_facts: True
  tasks:  
    - name: Create registry container
      community.docker.docker_container:
        name: registry
        image: registry:2
        ports:
          - "5000:5000"


- name: configure clients to use docker registry
  hosts: servers
  become: True
  gather_facts: True
  vars:
    - registry: 192.168.10.18
  tasks:
    - name: configure hosts to use our local registry
      shell: |
        echo '{
        "insecure-registries" : ["{{ registry }}:5000"]
        }' > /etc/docker/daemon.json
    - command: "systemctl restart docker"
    
- name: create custom docker images and push them to local regiestry
  hosts: master
  become: True
  vars:
    - registry: 192.168.10.18
  tasks:
    - name: create logparser image & push to local regiestry
      community.docker.docker_image:
        build:
           path: /stage1
        name: "{{ registry }}:5000/logparser"
        tag: latest
        push: yes
        source: build
        
    - name: create metrics image & push to local regiestry
      community.docker.docker_image:
        build:
           path: /stage2
        name: "{{ registry }}:5000/metrics"
        tag: latest
        push: yes
        source: build
        
    - name: create nginx image & push to local regiestry
      community.docker.docker_image:
        build:
           path: /stage3
        name: "{{ registry }}:5000/nginx"
        tag: latest
        push: yes
        source: build
    
    - name: Pull redis image
      community.docker.docker_image:
        name: redis:6.2
        source: pull
        
    - name: Tag and push to local regiestry
      community.docker.docker_image:
        name: redis:6.2
        repository: "{{ registry }}:5000/redis"
        push: yes
        source: local


- name: stack deployment
  hosts: master
  become: True
  gather_facts: True
  tasks:   
    - name: Deploy stack from a compose file
      community.docker.docker_stack:
        state: present
        name: app
        compose:
          - /docker-compose.yml
